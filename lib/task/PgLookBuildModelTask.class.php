<?php

class PgLookBuildModelTask extends PgLookBaseTask
{
  public function configure()
  {
    parent::configure();
    $this->name      = 'build-model';
    $this->briefDescription = 'Generate PgLook model files based upon the schema definition.';
    $this->detailedDescription = <<<EOF
The [pglook:build-model|INFO] generates your model class files based on the definition given in the config/pglook/schema.yml

Call it with:

  [php symfony pglook:build-model|INFO]
EOF;
  }

  public function execute($arguments = array(), $options = array())
  {
    $this->schema = $this->getSchema();
    foreach(array_keys($this->schema) as $class)
    {
      $this->generateClassesFor($class);
    }
  }

  protected function filesAlreadyExistFor($class_name)
  {
    return
      (
        file_exists($this->getPath().'/'.$class_name.'.class.php')
      and
        file_exists($this->getPath().'/'.$class_name.'Map.class.php')
      );
  }

  protected function generateUserClassesFor($class_name)
  {
    $this->log(sprintf('Creating user model files for class "%s"', $class_name));
    $version = PgLook::VERSION;
    $code = <<<EOF
<?php
 /*
  * PgLook version $version
  */

class $class extends PgLookBaseRecordObject
{
}
EOF;
    $this->createFile($class_name.'.class.php', $code);
    $code =<<<EOF
<?php
 /*
  * PgLook version $version
  */
class ${class_name}Map extends Base${class_name}Map
{
}
EOF;
    $this->createFile($class_name.'Map.class.php', $code);
  }

  protected function generateBaseClassesFor($class_name)
  {
    $this->log(sprintf('Creating base model file for class "%s"', $class_name));
    $version = PgLook::VERSION;
    $connection = array_key_exists('connection', $this->schema[$class_name]) ? $this->schema[$class_name]['connection'] : null;
    $object_name = array_key_exists('table', $this->schema[$class_name]) ? $this->schema[$class_name]['table'] : sfInflector::underscore($class_name);
    $definitions = $this->generateFieldsCode($class_name);
    $pks = sprintf('array(%s);', join(', ', $this->schema[$class_name]['primary_key']));

    $code = <<<EOF
<?php
/**
 * This file has been automatically generated by PgLook
 * DO NOT EDIT THIS FILE as the next pglook::build-model
 * will overwrite this file again.
 *
 * PgLook version $version
*/

abstract class Base${class_name}Map extends PgLookBaseTableMap
{
  public function initialize()
  {
    $this->connection = PgLook::getConnection($connection);
    $this->object_class = '$class_name';
    $this->object_name =  '$object_name';
    $this->field_definitions = array(
    $definitions
    );
    $this->pk_fields = array($pks);
  }
}
EOF;
    $this->createFile('base/Base'.$class_name.'Map.class.php', $code);
  }

  protected function generateFieldsCode($class_name)
  {
    $fields = array();
    foreach ($this->schema[$class_name]['columns'] as $column => $definition)
    {
      $fields[] = sprintf("'%s' => '%s'", $column, $definition['type']);
    }

    return join(",\n", $fields);
  }

  protected function getPath()
  {
    return sfConfig::get('sf_root_dir').'/lib/model/pglook';
  }
}
